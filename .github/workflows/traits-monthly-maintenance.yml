name: Traits Monthly Maintenance

on:
  schedule:
    - cron: '0 6 1 * *'
  workflow_dispatch:

jobs:
  maintenance:
    name: Run monthly trait maintenance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install maintenance dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install jsonschema pyyaml
          fi

      - name: Execute monthly maintenance script
        run: |
          bash scripts/cron/traits_monthly_maintenance.sh

      - name: Upload maintenance logs
        uses: actions/upload-artifact@v4
        with:
          name: monthly-trait-maintenance-${{ github.run_id }}
          path: logs/monthly_trait_maintenance/
          retention-days: 30

      - name: Extract anomaly status
        id: status
        run: |
          STATUS_FILE=$(ls logs/monthly_trait_maintenance/status-*.json | sort | tail -n 1)
          echo "status_file=$STATUS_FILE" >> "$GITHUB_OUTPUT"
          ANOMALY_COUNT=$(python -c "import json,sys; data=json.load(open('$STATUS_FILE', encoding='utf-8')); print(data.get('anomaly_count', 0))")
          echo "anomaly_count=$ANOMALY_COUNT" >> "$GITHUB_OUTPUT"
          if [ "$ANOMALY_COUNT" -gt 0 ]; then
            echo "has_anomalies=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_anomalies=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Open anomaly issue
        if: steps.status.outputs.has_anomalies == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = '${{ steps.status.outputs.status_file }}';
            const status = JSON.parse(fs.readFileSync(path, 'utf8'));
            const title = `Anomalie manutenzione trait ${status.generated_at}`;
            const notes = status.notes && status.notes.length
              ? status.notes.map((note) => `- ${note}`).join('\n')
              : '- Nessun dettaglio aggiuntivo.';
            const body = [
              `Manutenzione mensile trait completata con ${status.anomaly_count} anomalie.`,
              '',
              `Report: ${status.report_markdown}`,
              '',
              'Note:',
              notes,
              '',
              '_Questo issue Ã¨ stato aperto automaticamente dall\'automazione di manutenzione._'
            ].join('\n');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['maintenance', 'automation', 'needs-triage']
            });
