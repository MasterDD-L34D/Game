name: CI

on:
  push:
  pull_request:

jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      ts: ${{ steps.filter.outputs.ts }}
      cli: ${{ steps.filter.outputs.cli }}
      python: ${{ steps.filter.outputs.python }}
      data: ${{ steps.filter.outputs.data }}
      deploy: ${{ steps.filter.outputs.deploy }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: filter
        name: Detect impacted areas
        uses: dorny/paths-filter@v3
        with:
          filters: |
            ts:
              - 'package.json'
              - 'package-lock.json'
              - 'tools/ts/**'
              - 'webapp/package.json'
              - 'webapp/package-lock.json'
              - 'webapp/src/**'
            cli:
              - 'scripts/cli_smoke.sh'
              - 'tools/py/game_cli.py'
              - 'tools/py/game_cli/**'
            python:
              - 'scripts/**/*.py'
              - 'server/**/*.py'
              - 'services/**/*.py'
              - 'tests/**/*.py'
              - 'tools/py/**'
            data:
              - 'data/**'
              - 'packs/**'
              - 'reports/**'
            deploy:
              - 'scripts/trait_audit.py'
              - 'scripts/run_deploy_checks.sh'
              - 'tools/py/report_trait_coverage.py'
              - 'config/deploy/**'

  typescript-tests:
    runs-on: ubuntu-latest
    needs: paths-filter
    if: needs.paths-filter.outputs.ts == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: tools/ts/package-lock.json

      - name: Install Node.js dependencies
        working-directory: tools/ts
        run: npm ci

      - name: Run TypeScript tests
        working-directory: tools/ts
        run: npm test

      - name: Validate Species (TS)
        working-directory: tools/ts
        run: node dist/validate_species.js ../../data/core/species.yaml

  cli-checks:
    runs-on: ubuntu-latest
    needs:
      - paths-filter
    if: needs.paths-filter.outputs.cli == 'true' || needs.paths-filter.outputs.data == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: tools/ts/package-lock.json

      - name: Install Node.js dependencies
        working-directory: tools/ts
        run: npm ci

      - name: Build TypeScript artifacts
        working-directory: tools/ts
        run: npm run build --silent

      - name: Run TypeScript CLI
        working-directory: tools/ts
        run: node dist/roll_pack.js ENTP invoker ../../data/packs.yaml

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        working-directory: tools/py
        run: |
          python -m pip install --upgrade pip
          python -m pip install --requirement requirements.txt

      - name: Validate base datasets (CLI)
        working-directory: tools/py
        run: python3 game_cli.py validate-datasets

      - name: Validate Evo-Tactics ecosystem pack
        run: python3 tools/py/game_cli.py validate-ecosystem-pack --json-out /tmp/evo_pack_report.json

      - name: Run CLI smoke profiles
        run: ./scripts/cli_smoke.sh

  python-tests:
    runs-on: ubuntu-latest
    needs:
      - paths-filter
    if: needs.paths-filter.outputs.python == 'true' || needs.paths-filter.outputs.data == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        working-directory: tools/py
        run: |
          python -m pip install --upgrade pip
          python -m pip install --requirement requirements.txt

      - name: Run pytest
        run: pytest

      - name: Validate Species (Python)
        working-directory: tools/py
        run: |
          python3 validate_species.py ../../data/core/species.yaml

      - name: Run Python validation script
        working-directory: tools/py
        run: python roll_pack.py ENTP invoker ../../data/packs.yaml

  dataset-checks:
    runs-on: ubuntu-latest
    needs:
      - paths-filter
    if: needs.paths-filter.outputs.data == 'true' || needs.paths-filter.outputs.deploy == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        working-directory: tools/py
        run: |
          python -m pip install --upgrade pip
          python -m pip install --requirement requirements.txt

      - name: Audit trait catalog consistency
        run: python3 scripts/trait_audit.py --check

      - name: Regenerate trait baseline
        run: |
          python3 tools/py/build_trait_baseline.py \
            packs/evo_tactics_pack/docs/catalog/env_traits.json \
            packs/evo_tactics_pack/docs/catalog/trait_reference.json \
            --trait-glossary data/core/traits/glossary.json \
            --out data/derived/analysis/trait_baseline.yaml

      - name: Regenerate trait coverage reports
        run: |
          python3 tools/py/report_trait_coverage.py \
            --env-traits packs/evo_tactics_pack/docs/catalog/env_traits.json \
            --trait-reference packs/evo_tactics_pack/docs/catalog/trait_reference.json \
            --species-root packs/evo_tactics_pack/data/species \
            --trait-glossary data/core/traits/glossary.json \
            --out-json data/derived/analysis/trait_coverage_report.json \
            --out-csv data/derived/analysis/trait_coverage_matrix.csv
          python3 - <<'PY'
          import json, sys

          with open('data/derived/analysis/trait_coverage_report.json', encoding='utf-8') as handle:
              summary = json.load(handle).get('summary', {})

          min_traits = 27
          max_missing = 0

          traits_with_species = summary.get('traits_with_species')
          rules_missing = summary.get('rules_missing_species_total')

          errors: list[str] = []
          if traits_with_species is None or traits_with_species < min_traits:
              errors.append(f"traits_with_species={traits_with_species!r} sotto la soglia {min_traits}")
          if rules_missing is None or rules_missing > max_missing:
              errors.append(f"rules_missing_species_total={rules_missing!r} eccede il massimo consentito {max_missing}")

          if errors:
              print("\n".join(errors))
              sys.exit(1)
          PY

  deployment-checks:
    runs-on: ubuntu-latest
    needs:
      - paths-filter
    if: needs.paths-filter.outputs.deploy == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: tools/ts/package-lock.json

      - name: Install Node.js dependencies
        working-directory: tools/ts
        run: npm ci

      - name: Build TypeScript artifacts
        working-directory: tools/ts
        run: npm run build --silent

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        working-directory: tools/py
        run: |
          python -m pip install --upgrade pip
          python -m pip install --requirement requirements.txt

      - name: Run deploy validation checks
        env:
          DEPLOY_DATA_DIR: ${{ github.workspace }}/data
          CI: "true"
          PLAYWRIGHT_REUSE_SERVER: "0"
          DEPLOY_SKIP_SMOKE_TEST: "1"
        run: scripts/run_deploy_checks.sh
