#!/usr/bin/env python3
import sys, json
from pathlib import Path
import yaml

BASE = Path('.')
PARAM_ROOT = BASE/'data/evo-tactics/param-synergy'
MONO = {
  'species': BASE/'data/species.yaml',
  'packs':   BASE/'data/packs.yaml',
  'telemetry': BASE/'data/telemetry.yaml',
  'mating': BASE/'data/mating.yaml'
}

errors, warnings = [], []

def load_yaml(path: Path):
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f), None
    except Exception as e:
        return None, f'YAML parse error in {path}: {e}'

def check_species_yaml(p: Path):
    doc, err = load_yaml(p)
    if err:
        errors.append(err); return
    if not isinstance(doc, dict):
        errors.append(f'{p}: expected dict'); return
    _id = doc.get('id')
    if not _id:
        warnings.append(f'{p}: missing id (will default to filename in build script)')

def check_morph_yaml(p: Path):
    doc, err = load_yaml(p)
    if err:
        errors.append(err); return
    if not isinstance(doc, dict):
        errors.append(f'{p}: expected dict'); return
    if not doc.get('id') or not doc.get('type'):
        errors.append(f'{p}: missing required keys id/type')

def check_rules_yaml(p: Path):
    doc, err = load_yaml(p)
    if err:
        errors.append(err); return
    if not isinstance(doc, dict):
        errors.append(f'{p}: expected dict')

def walk_and_validate():
    if not PARAM_ROOT.exists():
        warnings.append(f'Missing param root: {PARAM_ROOT}'); return
    # Species
    for p in sorted((PARAM_ROOT/'species').glob('*.yaml')):
        check_species_yaml(p)
    # Morph
    for p in sorted((PARAM_ROOT/'morph').glob('*.yaml')):
        check_morph_yaml(p)
    # Rules (yaml only; md are docs)
    rules_dir = PARAM_ROOT/'rules'
    if rules_dir.exists():
        for p in sorted(rules_dir.glob('*.yaml')):
            check_rules_yaml(p)

    # Monoliths exist and parse
    for key, p in MONO.items():
        if not p.exists():
            warnings.append(f'Missing monolith: {p} (will be generated by build)')
            continue
        doc, err = load_yaml(p)
        if err:
            errors.append(err); continue
        if key == 'species' and not isinstance(doc.get('species'), list):
            errors.append(f'{p}: missing species list')
        if key == 'packs' and not isinstance(doc.get('packs'), dict):
            errors.append(f'{p}: missing packs dict')
        if key == 'telemetry' and not isinstance(doc, dict):
            errors.append(f'{p}: expected dict')
        if key == 'mating' and not isinstance(doc, dict):
            errors.append(f'{p}: expected dict')

if __name__ == '__main__':
    walk_and_validate()
    print('YAML validation summary:')
    print('  warnings:', len(warnings))
    print('  errors  :', len(errors))
    if warnings:
        print('
WARNINGS:')
        for w in warnings:
            print('-', w)
    if errors:
        print('
ERRORS:')
        for e in errors:
            print('-', e)
        sys.exit(1)
    sys.exit(0)
